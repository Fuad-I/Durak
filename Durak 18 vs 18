import numpy as np
import random

suits = [1, 2, 3, 4]
ranks = list(range(6, 15))  # 6 to Ace represented by numbers 6-14


def init_deck():
    deck = [(rank, suit) for suit in suits for rank in ranks]
    random.shuffle(deck)
    return deck

class Durak:
    def __init__(self):
        self.num_players = 2
        self.deck = init_deck()
        self.players_hands = [[], []]
        self.trump_card = self.deck[-1]  # Last card in the deck is the trump card
        self.trump_suit = self.trump_card[1]
        self.table = []
        self.attacker, self.defender = 0, 1
        self.attack_in_progress = True
        self.deal_cards()

    def deal_cards(self):
        self.players_hands[0], self.players_hands[1] = self.deck[:18], self.deck[18:]

    def get_initial_state(self):
        return {
            'attacker_hand': self.players_hands[self.attacker].copy(),
            'defender_hand': self.players_hands[self.defender].copy(),
            'table': [],
            'trump_suit': self.trump_suit,
            'attack_in_progress': True
        }

    def get_valid_moves(self, state, player):
        valid_moves = []
        if player == self.attacker:
            if len(state['table']) == 12:
                return ['end_attack']
            if state['table']:
                valid_moves = [card for card in state['attacker_hand'] if card[0]
                               in [dcard[0] for dcard in state['table']]] + ['end_attack']
            else:
                valid_moves = state['attacker_hand']
        if player == self.defender:
            if state['table']:
                valid_moves = [card for card in state['defender_hand'] if
                               self.is_valid_defense(card, state['table'][-1])]
                valid_moves.append("take_cards")

        return valid_moves

    def is_valid_defense(self, defend_card, attack_card):
        if defend_card[1] == attack_card[1] and defend_card[0] > attack_card[0]:
            return True
        if defend_card[1] == self.trump_suit and attack_card[1] != self.trump_suit:
            return True
        return False

    def get_next_state(self, state, action, player):
        next_state = state.copy()
        if action == "end_attack":
            next_state['attack_in_progress'] = False
            return next_state
        elif action == "take_cards":
            # Defender takes all cards from the table
            next_state['defender_hand'].extend(state['table'])
            next_state['table'] = []
            next_state['attack_in_progress'] = False
            return next_state
        else:
            # Regular card play
            next_state['table'].append(action)

            if player == self.attacker:
                next_state['attacker_hand'].remove(action)
            else:
                next_state['defender_hand'].remove(action)

        return next_state

    def get_value_and_terminated(self, state):
        if len(state['attacker_hand']) == 0 or len(state['defender_hand']) == 0:
            return 1, True  # Game ends, return value (win)
        return 0, False  # Game continues

    def get_opponent(self, player):
        return (player + 1) % 2


def begin_game():
    new_game = Durak()
    current_state = new_game.get_initial_state()
    new_player = 0

    while True:
        print("Current State:", current_state)

        valid_moves1 = new_game.get_valid_moves(current_state, new_player)
        print("Valid Moves:", valid_moves1)

        action = random.choice(valid_moves1)
        print(action)
        current_state = new_game.get_next_state(current_state, action, new_player)
        value, is_terminal = new_game.get_value_and_terminated(current_state)

        if is_terminal:
            print("Final State:", current_state)
            if value == 1:
                print("Player 2 wins!")
            elif value == -1:
                print("Player 1 wins!")
            else:
                print("Game ended in a draw!")
            break

        new_player = new_game.get_opponent(new_player)  # Switch player


begin_game()

